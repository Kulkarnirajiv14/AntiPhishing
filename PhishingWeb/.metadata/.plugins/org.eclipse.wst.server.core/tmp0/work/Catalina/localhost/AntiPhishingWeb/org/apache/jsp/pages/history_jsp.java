/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2022-08-30 12:19:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;
import com.helper.UserModel;
import com.helper.HistoryModel;
import java.util.List;
import com.helper.ConnectionManager;

public final class history_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.helper.UserModel");
    _jspx_imports_classes.add("com.helper.ConnectionManager");
    _jspx_imports_classes.add("com.helper.HistoryModel");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!doctype html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/header.jsp", out, false);
      out.write("</head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/theme/font-awesome-4.7.0/css/font-awesome.min.css\">\r\n");
      out.write("\r\n");
      out.write("<body class=\"h-100\">\r\n");
      out.write("\r\n");

	UserModel um = (UserModel)session.getAttribute("USER_MODEL");
	List<HistoryModel> list = ConnectionManager.getHistory(um.getUid());

      out.write("<div class=\"container h-100\">\r\n");
      out.write("\t\t<div class=\"row h-100\">\r\n");
      out.write("\t\t\t<div class=\"mt-4\">\r\n");
      out.write("\t\t\t\t<h1 class=\"text-center text-white\">Phishing URL Detection</h1>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"offset-md-2\tcol-md-8 container d-flex h-100\">\r\n");
      out.write("\t\t\t\t\t<div class=\"row justify-content-center align-self-center w-100\"\r\n");
      out.write("\t\t\t\t\t\tstyle=\"margin-top: -180px;\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-body py-5\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<h2 class=\"text-center\">History</h2>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"mb-4\">\r\n");
      out.write("\t\t\t\t\t\t\t\t");
if(list.size()>0){ 
      out.write("<table class=\"table\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<thead class=\"thead-dark\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">#</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">URL</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Check Phishing</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Delete</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t");
for(int i=0; i<list.size(); i++){ 
												HistoryModel hm = (HistoryModel) list.get(i);
												String encoded = URLEncoder.encode(hm.getUrl().toString().trim());
												String rowid = hm.getId();
												
      out.write("<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">");
      out.print(hm.getId() );
      out.write("</th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<td>");
      out.print(hm.getUrl().toString() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<td><a href=\"");
      out.print(request.getContextPath());
      out.write("/pages/index.jsp?url=");
      out.print(encoded);
      out.write("\">Check Again</a></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"text-center text-danger\"><i class=\"fa fa-trash\" aria-hidden=\"true\" style=\"cursor:pointer\" onclick=\"fnDelete(");
      out.print(hm.getId() );
      out.write(")\"></i></td> \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t");
} 
      out.write("</tbody>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
}else{ 
      out.write("<h3 class=\"text-center text-info\">No History Yet!</h3>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
} 
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/footer.jsp", out, false);
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\t$(\"#loaderss\").hide();\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function fnSubmit(){\t\r\n");
      out.write("\tfnResultShow(\"Detecting...\");\r\n");
      out.write("\t$(\"#btns\").hide();\r\n");
      out.write("\t$(\"#loaderss\").show();\r\n");
      out.write("\tvar str = $(\"#form_url\").serialize();\r\n");
      out.write("\r\n");
      out.write("\t$.post(\"");
      out.print(request.getContextPath());
      out.write("/connector/ajax.jsp?methodId=checkURL\",\r\n");
      out.write("\t\t\t\t\t\tstr, function(data) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tdata = $.trim(data);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tfnResultShow(data);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#result\").text(data);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#btns\").show();\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#loaderss\").hide();\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction fnResultShow(data) {\r\n");
      out.write("\t\tif (data.toLowerCase() == 'phishing') {\r\n");
      out.write("\t\t\t$(\"#result\").css('border', '2px solid red');\r\n");
      out.write("\t\t} else if (data.toLowerCase() == 'normal') {\r\n");
      out.write("\t\t\t$(\"#result\").css('border', '2px solid green');\r\n");
      out.write("\t\t} else if (data == 'Detecting...') {\r\n");
      out.write("\t\t\t$(\"#result\").text(\"Detecting...\");\r\n");
      out.write("\t\t\t$(\"#result\").css('border', 'none');\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t$(\"#result\").css('border', '2px solid blue');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction fnDelete(rowid){\t\r\n");
      out.write("\t\r\n");
      out.write("\t\tvar str =\"id=\"+rowid;\r\n");
      out.write("\r\n");
      out.write("\t\t$.post(\"");
      out.print(request.getContextPath());
      out.write("/tiles/ajax.jsp?methodId=deletebyid\",\r\n");
      out.write("\t\t\t\t\t\t\tstr, function(data) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tdata = $.trim(data);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif(data==1){\r\n");
      out.write("\t\t\t\t\t\t\t\talert(\"Data Deleted Successfully....\");\r\n");
      out.write("\t\t\t\t\t\t\t\twindow.location.href=\"");
      out.print(request.getContextPath());
      out.write("/pages/history.jsp\";\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t \r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
